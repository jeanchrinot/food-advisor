// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String    @unique
  password              String?
  role                  UserRole  @default(USER)
  isBanned Boolean @default(false)
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  conversation Conversation? 
  emailVerified         DateTime? 
  image                 String?
  accounts              Account[]
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Account {
  id                 String    @default(auto()) @id @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  type               String?
  provider           String?
  providerAccountId  String?
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id            String    @default(auto()) @id @map("_id") @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id  @default(auto()) @map("_id") @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  userId        String    @db.ObjectId
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Conversation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @db.ObjectId @unique
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages          Message[]
  //Time stmps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  content       String?
  attachments   Json?

  senderId      String? @db.ObjectId
  senderType String // bot, user, agent

  conversationId String @db.ObjectId      
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
  status String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
